<HTML><HEAD>
<TITLE>October 2000 C++ Experts Forum/Effective Standard C++ Library/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:  The balanceIterator adapter</A></h4>
<pre>
class balanceIterator 
{
public:
  typedef set&lt;account&gt;::iterator           adapted_type;
  typedef adapted_type::iterator_category  iterator_category;
  typedef adapted_type::value_type         value_type;
  typedef adapted_type::distance_type      difference_type;
  typedef double*                          pointer;
  typedef double&amp;                          reference;

   balanceIterator() {}
   explicit balanceIterator(adapted_type i) :adaptee(i) {}
   template &lt;class Iter&gt;

   adapted_type base() const { return adaptee; }

   reference operator*() const 
   {return const_cast&lt;reference&gt;(adaptee-&gt;balance()); }
   pointer  operator-&gt;() const { return &amp;(operator*()); }

   balanceIterator&amp; operator++()
   { ++adaptee;
     return (*this); 
   }
   balanceIterator operator++(int)
   { balanceIterator _Tmp = *this;
    ++adaptee;
    return (_Tmp);
   }
   balanceIterator&amp; operator--()
   { --adaptee;
     return (*this); 
   }
   balanceIterator operator--(int)
   { balanceIterator _Tmp = *this;
     --adaptee;
     return (_Tmp);
   }
private:
   adapted_type adaptee;
};

inline bool operator==(const balanceIterator&amp; x, 
                       const balanceIterator&amp; y) {
  return x.base() == y.base();
}
inline bool operator!=(const balanceIterator&amp; x, 
                       const balanceIterator&amp; y) {
  return x.base() != y.base();
}
</pre>

