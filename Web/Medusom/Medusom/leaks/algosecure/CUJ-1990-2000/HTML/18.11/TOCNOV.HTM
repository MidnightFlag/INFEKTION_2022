<HTML>
<HEAD>
<TITLE>November 2000</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">November 2000<BR>
                Volume 18 Number 11</FONT></H3>
               
<H3><FONT COLOR="#FF0000">SCIENTIFIC NUMERICAL</FONT></H3>

<H4><A HREF="thierauf/thierauf.htm">Extracting Data from X-Y Plots</A></H4>
<p><b>Rainer Thierauf</b><br>
<i>Scanners now input text with reasonable accuracy &#151; why not graphical data as well?</i><P>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="ehlinger/ehlinger.htm">Creating Truly Maintainable Class Factories</A></H4>
<p><b>Early Ehlinger</b><br>
<i>It is usually best to recycle code already written, particularly if it's easy to get wrong.</i><P>

<H4><A HREF="gibbons/gibbons.htm">A Portable "typeof" Operator</A></H4>
<p><b>Bill Gibbons</b><br>
<i>Here's a not-so-stupid template trick that mostly meets the need for a <B>typeof</B> operator.</i><P>

<H4><A HREF="scanlon/scanlon.htm">Secure Web-Based Licensing</A></H4>
<p><b>Mike Scanlon</b><br>
<i>If you want to protect your software from misuse, you have to outsmart potential thieves and still not annoy your legitimate customers. This is not as easy as you might at first think.</i><P>

<H3><FONT COLOR="#FF0000">C/C++ TIPS</FONT></H3>
<H4><A HREF="tips/tips.htm">Tip #3: Creating an Index Table in STL, Take 2</A></H4>
<p><b>Sol Foster</b><br>
<i>Pointers seldom sort the way you intend, but STL offers a handy way to say what you really mean.</i><P>

<H3><FONT COLOR="#FF0000">BOOK REVIEW</FONT></H3>
<H4><A HREF="button/button.htm">Standard C++ IOStreams and Locales</A></H4>
<p><b>reviewed by Brian Button</b></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>
<H4><A HREF="austern/austern.htm">The Standard Librarian: IOStreams and Stdio</A></H4>
<p><b>Matt Austern</b><br>
<i>You </I>can<I> mix C and C++ I/O operations, but you have to be careful if you don't want garbled streams.</i><P>

<H4><A HREF="allison/allison.htm">import java.*: Basic Stream I/O</A></H4>
<p><b>Chuck Allison</b><br>
<i>Java supports input/output of streams with a gazillion combinations of options.</i><P>

<H4><A HREF="sutter/sutter.htm">Sutter's Mill: Constructor Failures (or, The Objects That Never Were)</A></H4>
<p><b>Herb Sutter</b><br>
<i>Exceptions thrown during object construction must be handled with extreme care.</i><P>

<H4><A HREF="meyers/meyers.htm">The New C: It All Began with FORTRAN</A></H4>
<p><b>Randy Meyers</b><br>
<i>Sometimes the best way to improve a language is to make it look more like the one it set out to obsolete 30 years earlier.</i><P>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>
<H4><A HREF="editor/editor.htm">Editor's Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS FORUM &#151 WEB-EXCLUSIVE</FONT></H3>
<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:<P>

<H4><A HREF="../cexp1811/henney/henney.htm">From Mechanism to Method: Function Follows Form</A></H4>
<p><b>Kevlin Henney</b><br>
<I>Of all the features of C++ that can affect source code readability, operator overloading is one of the most powerful. Operator overloading can render otherwise well-written code obscure; on the other hand, it makes possible many important idioms — smart pointers, function objects, and iterators, to name a few. Kevlin Henney shows us another good application of operator overloading: a remember_function that bundles a target object together with a member function pointer for later callback.</I><P>

<H4><A HREF="../cexp1811/murray/murray.htm">Obfuscated C++: the Final Column</A></H4>
<p><b>Robert Murray</b><br>
<I>Rob delivers the final answer to his final puzzler.</I><P>

<H4><A HREF="../cexp1811/hyslop/hyslop.htm">Conversations: By Any Other Name</A></H4>
<p><b>Jim Hyslop and Herb Sutter</b><br>
<I>Don't reject a pattern because of its name </I>&#151;<I> it might be just the solution you need.</I><P>

<H4><A HREF="../cexp1811/vinoski/vinoski.htm">Object Interconnections: The History of the OMG C++ Mapping</A></H4>
<p><b>Douglas Schmidt and Steve Vinoski</b><br>
<I>An insiders' view of the technical and political issues behind standardization.</I><P>

<H4><A HREF="../cexp1811/lippman/lippman.htm">Book Review of Herb Sutter's Exceptional C++</A></H4>
<p><b>reviewed by Stanley Lippman</b><br>
<I>We reviewed </I>Exceptional C++<I> in the February 2000 issue of </I>CUJ<I>; Stan gives us a fresh look at this important book.</I><P>
</BLOCKQUOTE></BODY></HTML>
